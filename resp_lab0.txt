/*Laboratorio 0 - P4 2019*/

Respuestas:

a) ¿Cuáles son las dependencias circulares que fueron necesarias solucionar para que el
programa compile? 
Respuesta: Hay tres dependencias circulares en el diagrama presentado por el ejercicio que
fueron necesarias solucionar para que el programa compile: 
A depende de B y B de A, B depende de C y C de B, y C depende de A y A de C. Nos referimos a que
una dependa de la otra cuando dos Clases están asociadas entre sí en forma bidireccional.

b) ¿Qué es forward declaration?
Respuesta: Cuando se tienen dos clases relacionadas entre sí de forma bidireccional, hay que 
incluir la declaración de una en la otra y viceversa (esto sería incluir 
el nombre_clase.h de una en el de la otra). 
Esto genera una dependencia circular en el caso que sea una asociación bidireccional, 
es decir, que la asociación se puede recorrer en ambos sentidos, porque en este caso
el compilador queda en una especie de loop ya que en claseA.h va a buscar a claseB.h, pero 
en el momento que va a buscar claseB.h se encuentra con que tiene que ir a buscar claseA.h y esto
nunca terminaría.
Para solucionarlo se deben usar las forward declarations. Esto es que en una de las dos
inclusiones de las clases se debe hacer de la siguiente manera: 
antes de declarar la clase B, se declara (en claseB.h) class claseA; (esto es a lo que se le llama forward declaration), 
luego se define la clase B, y por último se incluye el archivo claseA.h (#include claseA.h). 
De aquí el término forward declaration: se le indica al compilador la existencia 
de la claseA antes de pasarle su definición completa.
